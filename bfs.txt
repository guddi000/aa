#include <iostream>  // Include the input/output stream library
#include <vector>    // Include the vector container
#include <queue>     // Include the queue container
#include <omp.h>     // Include OpenMP header file

using namespace std;  // Use the standard namespace

// Function to perform Breadth-First Search (BFS) in parallel
void parallelBFS(vector<vector<int>>& graph, int startNode, vector<bool>& visited) {
    queue<int> q;  // Declare a queue to store nodes to be visited
    q.push(startNode);  // Push the starting node into the queue
    visited[startNode] = true;  // Mark the starting node as visited

    // Continue BFS until the queue is empty
    while (!q.empty()) {
        int currentNode = q.front();  // Get the front element of the queue
        q.pop();  // Remove the front element from the queue

        // Visit neighbors of the current node in parallel
        #pragma omp parallel for
        for (int i = 0; i < graph[currentNode].size(); ++i) {
            int neighbor = graph[currentNode][i];  // Get the neighbor node
            if (!visited[neighbor]) {  // If the neighbor node is not visited
                visited[neighbor] = true;  // Mark it as visited
                q.push(neighbor);  // Push it into the queue to visit later
            }
        }
    }
}

int main() {
    int numNodes, numEdges;
    cout << "Enter number of nodes and edges: ";
    cin >> numNodes >> numEdges;  // Input the number of nodes and edges

    // Create an adjacency list representation of the graph
    vector<vector<int>> graph(numNodes);  

    cout << "Enter edges:\n";
    // Input the edges of the graph
    for (int i = 0; i < numEdges; ++i) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);  // Add edge (u, v) to the graph
    }

    int startNode;
    cout << "Enter starting node for BFS: ";
    cin >> startNode;  // Input the starting node for BFS

    // Initialize the visited array with all nodes unvisited
    vector<bool> visited(numNodes, false);

    // Perform BFS from the specified starting node
    parallelBFS(graph, startNode, visited);

    // Print the nodes visited during BFS
    cout << "Visited nodes: ";
    for (int i = 0; i < numNodes; ++i) {
        if (visited[i]) {
            cout << i << " ";  // Print the visited node
        }
    }
    cout << endl;

    return 0;  // Return 0 to indicate successful program execution
}

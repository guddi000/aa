#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

using namespace std;

// Function to perform BFS
void parallelBFS(vector<vector<int>>& graph, int startNode, vector<bool>& visited) {
    queue<int> q;
    q.push(startNode);
    visited[startNode] = true;

    while (!q.empty()) {
        int currentNode = q.front();
        q.pop();

        // Visit neighbors of currentNode
        #pragma omp parallel for
        for (int i = 0; i < graph[currentNode].size(); ++i) {
            int neighbor = graph[currentNode][i];
            if (!visited[neighbor]) {
                visited[neighbor] = true;
                q.push(neighbor);
            }
        }
    }
}

int main() {
    int numNodes, numEdges;
    cout << "Enter number of nodes and edges: ";
    cin >> numNodes >> numEdges;

    vector<vector<int>> graph(numNodes);
    cout << "Enter edges:\n";
    for (int i = 0; i < numEdges; ++i) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
    }

    int startNode;
    cout << "Enter starting node for BFS: ";
    cin >> startNode;

    // Initialize visited array
    vector<bool> visited(numNodes, false);

    // Perform BFS
    parallelBFS(graph, startNode, visited);

    // Print visited nodes
    cout << "Visited nodes: ";
    for (int i = 0; i < numNodes; ++i) {
        if (visited[i]) {
            cout << i << " ";
        }
    }
    cout << endl;

    return 0;
}



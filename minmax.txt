#include <iostream>
#include <omp.h>

using namespace std;

void simpleComputation(int a[], int n)
{
    int min_val = a[0], max_val = a[0];
    int sum = 0;

    double start_time = omp_get_wtime(); // Start timing

    for (int i = 0; i < n; i++)
    {
        sum += a[i];
        if (a[i] < min_val)
        {
            min_val = a[i];
        }
        if (a[i] > max_val)
        {
            max_val = a[i];
        }

        // Increase computational workload
        for (int j = 0; j < 100000; j++)
        {
            sum *= 1.001;
        }
    }

    double end_time = omp_get_wtime(); // End timing

    float avg = (sum) / n;

    cout << "\nSimple Computation Results:\n";
    cout << "Minimum: " << min_val << endl;
    cout << "Maximum: " << max_val << endl;
    cout << "Sum: " << sum << endl;
    cout << "Average: " << avg << endl;
    cout << "Time taken: " << (end_time - start_time) * 1000 << " milliseconds" << endl;
}

void parallelComputation(int a[], int n)
{
    int min_val = a[0], max_val = a[0];
    int sum = 0;

    double start_time = omp_get_wtime(); // Start timing

#pragma omp parallel for reduction(min : min_val) reduction(max : max_val) reduction(+ : sum) schedule(static)
    for (int i = 0; i < n; i++)
    {
        sum += a[i];
        if (a[i] < min_val)
        {
            min_val = a[i];
        }
        if (a[i] > max_val)
        {
            max_val = a[i];
        }

        // Increase computational workload
        for (int j = 0; j < 100000; j++)
        {
            sum *= 1.001;
        }
    }

    double end_time = omp_get_wtime(); // End timing

    float avg = (sum) / n;

    cout << "\nParallel Computation Results:\n";
    cout << "Minimum: " << min_val << endl;
    cout << "Maximum: " << max_val << endl;
    cout << "Sum: " << sum << endl;
    cout << "Average: " << avg << endl;
    cout << "Time taken: " << (end_time - start_time) * 1000 << " milliseconds" << endl;
}

int main()
{
    int a[1000], n;
    cout << "Enter the number of elements in array: ";
    cin >> n;

    cout << "\nEnter array elements: ";
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }

    simpleComputation(a, n);
    parallelComputation(a, n);

    return 0;
}





////////////////////////////////
//Min max reduction

#include <iostream>
//#include <vector>
#include <omp.h>
#include <climits>
using namespace std;
void min_reduction(int arr[], int n) {
 int min_value = INT_MAX;
 #pragma omp parallel for reduction(min: min_value)
 for (int i = 0; i < n; i++) {
if (arr[i] < min_value) {
 min_value = arr[i];
}
 }
 cout << "Minimum value: " << min_value << endl;
}
void max_reduction(int arr[], int n) {
 int max_value = INT_MIN;
 #pragma omp parallel for reduction(max: max_value)
 for (int i = 0; i < n; i++) {
if (arr[i] > max_value) {
 max_value = arr[i];
}
 }
 cout << "Maximum value: " << max_value << endl;
}
void sum_reduction(int arr[], int n) {
 int sum = 0;
 #pragma omp parallel for reduction(+: sum)
 for (int i = 0; i < n; i++) {
sum += arr[i];
 }
 cout << "Sum: " << sum << endl;
}
void average_reduction(int arr[], int n) {
 int sum = 0;
 #pragma omp parallel for reduction(+: sum)
 for (int i = 0; i < n; i++) {
sum += arr[i];
 }
 cout << "Average: " << (double)sum / (n-1) << endl;
}
int main() {
 int *arr,n;
 cout<<"\n enter total no of elements=>";
 cin>>n;
 arr=new int[n];
 cout<<"\n enter elements=>";
 for(int i=0;i<n;i++)
 {
 cin>>arr[i];
 }
// int arr[] = {5, 2, 9, 1, 7, 6, 8, 3, 4};
// int n = size(arr);
 min_reduction(arr, n);
 max_reduction(arr, n);
 sum_reduction(arr, n);
 average_reduction(arr, n);
}
